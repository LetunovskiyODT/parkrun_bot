import random

from aiogram import types

import keyboards as kb
from app import dp, bot
from utils import content, fucomp


@dp.message_handler(commands='start')
@dp.throttled(rate=5)
async def send_welcome(message: types.Message):
    await message.answer(content.start_message, reply_markup=kb.main, disable_notification=True)


@dp.message_handler(regexp='‚ùì —Å–ø—Ä–∞–≤–∫–∞')
@dp.message_handler(commands=['help', '–ø–æ–º–æ—â—å'])
@dp.throttled(rate=3)
async def commands(message: types.Message):
    await message.answer(content.help_message,
                         disable_notification=True, parse_mode='html', disable_web_page_preview=True)


@dp.message_handler(commands=['admin', '–∞–¥–º–∏–Ω'])
@dp.message_handler(lambda message: fucomp.bot_compare(message.text, fucomp.phrases_admin))
@dp.throttled(rate=3)
async def admin(message: types.Message):
    if message.chat.type == 'private':  # private chat message
        await message.reply('–ó–¥–µ—Å—å –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤, —ç—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç.')
    else:
        admin = random.choice(await bot.get_chat_administrators(message.chat.id)).user
        about_admin = f'\n–ê–¥–º–∏–Ω @{admin.username} - {admin.first_name}  {admin.last_name}'
        await message.answer(random.choice(content.phrases_about_admin) + about_admin)


@dp.message_handler(regexp='üîß –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
@dp.message_handler(commands=['settings'])
@dp.throttled(rate=2)
async def process_command_settings(message: types.Message):
    await message.answer('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', reply_markup=kb.inline_parkrun)


@dp.message_handler(regexp='üå≥ –ø–∞—Ä–∫—Ä–∞–Ω')
@dp.message_handler(commands=['statistics'])
@dp.throttled(rate=2)
async def process_command_statistics(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å', reply_markup=kb.inline_stat)


@dp.message_handler(regexp='üìã —Ä–∞–∑–Ω–æ–µ')
@dp.message_handler(commands=['info'])
@dp.throttled(rate=2)
async def process_command_statistics(message: types.Message):
    await message.answer('–ö–æ–µ-—á—Ç–æ –µ—â—ë –ø–æ–º–∏–º–æ –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤:', reply_markup=kb.inline_info)
