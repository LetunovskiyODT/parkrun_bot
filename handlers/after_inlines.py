import os
import re

from app import dp, bot, logger
from handlers.helpers import handle_throttled_query
from utils import content, instagram, redis
from parkrun import clubs, latest, helpers


@dp.message_handler(regexp='‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–∏–∏...')
@dp.throttled(handle_throttled_query, rate=12)
async def latestparkruns_club_participation(message):
    await bot.send_chat_action(message.chat.id, 'typing')
    user_id = message.from_user.id
    user_settings = await redis.get_value(user_id)
    club_id = user_settings.get('cl_id', None)
    if not club_id:
        await message.answer(content.no_club_message)
    else:
        data = await clubs.get_participants(club_id)
        await message.answer(data, parse_mode='Markdown', disable_web_page_preview=True)
    await bot.delete_message(message.chat.id, message.message_id)


@dp.message_handler(regexp='üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö')
@dp.throttled(handle_throttled_query, rate=6)
async def post_latestparkrun_diagrams(message):
    await bot.send_chat_action(message.chat.id, 'typing')
    user_id = message.from_user.id
    user_settings = await redis.get_value(user_id)
    parkrun_name = user_settings.get('pr', None)
    if not parkrun_name:
        return await message.answer(content.no_parkrun_message)

    if '–¥–∏–∞–≥—Ä–∞–º–º—ã' in message.text:
        pic = await latest.make_latest_results_diagram(parkrun_name, 'results.png')
        if os.path.exists("results.png"):
            await bot.send_photo(message.chat.id, pic)
            pic.close()
        else:
            logger.error('File results.png not found! Or the picture wasn\'t generated.')

    elif '–æ –∫–ª—É–±–∞—Ö...' in message.text:
        pic = await latest.make_clubs_bar(parkrun_name, 'clubs.png')
        if os.path.exists("clubs.png"):
            await bot.send_photo(message.chat.id, pic)
            pic.close()
        else:
            logger.error('File clubs.png not found! Or the picture wasn\'t generated.')
    elif '—Å –æ–±—â–µ–π –∏–Ω—Ñ–æ–π.' in message.text:
        report = await latest.review_table(parkrun_name)
        await message.answer(report, parse_mode='Markdown')
    await bot.delete_message(message.chat.id, message.message_id)


@dp.message_handler(regexp='‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ ')
@dp.throttled(handle_throttled_query, rate=12)
async def post_teammate_table(message):
    await bot.send_chat_action(message.chat.id, 'typing')
    user_id = message.from_user.id
    user_settings = await redis.get_value(user_id)
    parkrun_name = user_settings.get('pr', None)
    club_id = user_settings.get('cl_id', None)
    if not club_id:
        await message.answer(content.no_club_message)
    if not parkrun_name:
        await message.answer(content.no_parkrun_message)
    if not (club_id and parkrun_name):
        return

    if '–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–æ–≤' in message.text:
        data = await clubs.get_club_fans(parkrun_name, club_id)
        await message.answer(data, parse_mode='Markdown')

    elif '–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—Ç–æ–≤' in message.text:
        data = await clubs.get_club_purkruners(parkrun_name, club_id)
        await message.answer(data, parse_mode='Markdown')

    elif '—Ä–µ–∫–æ—Ä–¥–∞—Ö' in message.text:
        data = await clubs.get_parkrun_club_top_results(parkrun_name, club_id)
        await message.answer(data, parse_mode='Markdown')

    elif '–≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª—É–±–µ' in message.text:
        club_rec = [club for club in helpers.CLUBS if club['id'] == club_id]
        if club_rec:
            info = f"""*–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—É–±*: {club_rec[0]['name']}.
            *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤*: {club_rec[0]['participants']}.
            *–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª—É–± –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ*: {club_rec[0]['link']}.
            *–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª—É–± –Ω–∞ —Å–∞–π—Ç–µ parkrun.ru*: https://www.parkrun.com/profile/groups#id={club_rec[0]['id']}
            –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É _–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è_, 
            —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—É–± (–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã)."""
            await message.answer(info, parse_mode='Markdown')
        else:
            await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–ª—É–±–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
    await bot.delete_message(message.chat.id, message.message_id)


@dp.message_handler(regexp=r'–î–æ—Å—Ç–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏–∑ @[\w.]+ –ü–æ–¥–æ–∂–¥–∏—Ç–µ\.{3}')
@dp.throttled(handle_throttled_query, rate=20)
async def get_instagram_post(message):
    await bot.send_chat_action(message.chat.id, 'typing')
    login = os.environ.get('IG_USERNAME')
    password = os.environ.get('IG_PASSWORD')
    user = re.search(r'–∏–∑ @([\w.]+)\. –ü–æ–¥–æ–∂–¥–∏—Ç–µ\.', message.text)[1]
    ig_post = instagram.get_last_post(login, password, user)
    await bot.send_photo(message.chat.id, *ig_post, disable_notification=True)
    await bot.delete_message(message.chat.id, message.message_id)
