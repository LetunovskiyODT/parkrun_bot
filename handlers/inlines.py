import re
import time

from aiogram import types

from app import logger, bot, dp
from utils import content, weather, news
from parkrun import helpers, records


@dp.inline_handler(lambda query: 'parkrun' in query.query or '–ø–∞—Ä–∫—Ä–∞–Ω' in query.query)
async def query_all_parkruns(inline_query: types.InlineQuery):
    offset = int(inline_query.offset) if inline_query.offset else 0
    try:
        parkruns_list = helpers.PARKRUNS
        quotes = parkruns_list[offset:]
        m_next_offset = str(offset + 15) if len(quotes) >= 15 else None
        parkruns_menu = [types.InlineQueryResultArticle(
            id=f'{offset + k}', title=p, input_message_content=types.InputTextMessageContent(f'/setparkrun {p}')
        )
            for k, p in enumerate(quotes[:15])]
        await bot.answer_inline_query(inline_query.id, parkruns_menu,
                                      next_offset=m_next_offset if m_next_offset else "", cache_time=60000)
    except Exception as e:
        logger.error(e)


@dp.inline_handler(lambda query: 'clubs' in query.query or '–∫–ª—É–±' in query.query)
async def query_all_clubs(inline_query: types.InlineQuery):
    offset = int(inline_query.offset) if inline_query.offset else 0
    try:
        clubs_list = helpers.CLUBS
        quotes = clubs_list[offset:]
        m_next_offset = str(offset + 15) if len(quotes) >= 15 else None
        clubs_menu = [types.InlineQueryResultArticle(
            id=f'{k + offset}', title=p['name'],
            input_message_content=types.InputTextMessageContent(f"/setclub {p['name']}"))
            for k, p in enumerate(quotes[:15])]
        await bot.answer_inline_query(inline_query.id, clubs_menu,
                                      next_offset=m_next_offset if m_next_offset else "", cache_time=0)
    except Exception as e:
        logger.error(e)


@dp.inline_handler(lambda query: '–ø–æ–≥–æ–¥–∞' in query.query or 'weather' in query.query)
async def query_weather(inline_query: types.InlineQuery):
    try:
        data = []
        for k, v in content.places.items():
            w = await weather.get_weather(k, v.lat, v.lon)
            data.append(w)
        places_weather = [types.InlineQueryResultArticle(
            id=f'{k}', title=k, description='–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å',
            input_message_content=types.InputTextMessageContent(w))
            for (k, v), w in zip(content.places.items(), data)]
        await bot.answer_inline_query(inline_query.id, places_weather, cache_time=3200)
    except Exception as e:
        logger.error(e)


@dp.inline_handler(lambda query: '–≤–æ–∑–¥—É—Ö' in query.query or 'air' in query.query)
async def query_air(inline_query: types.InlineQuery):
    try:
        data = []
        for k, v in content.places.items():
            aq = await weather.get_air_quality(k, v.lat, v.lon)
            data.append(aq)
        places_air = [types.InlineQueryResultArticle(
            id=f'{k}', title=k, description='–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞',
            input_message_content=types.InputTextMessageContent(aq[1]))
            for (k, v), aq in zip(content.places.items(), data)]
        await bot.answer_inline_query(inline_query.id, places_air, cache_time=3200)
    except Exception as e:
        logger.error(e)


@dp.inline_handler(lambda query: re.search(r'—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω|—Å—Ç–∞—Ä—Ç|–∑–∞–±–µ–≥|events', query.query))
async def query_competitions(inline_query: types.InlineQuery):
    try:
        date = time.gmtime(time.time())
        month, year = date.tm_mon, date.tm_year
        competitions = await news.get_competitions(month, year)
        logger.info(str(len(competitions)))
        if len(competitions) < 10:
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
            competitions += await news.get_competitions(month, year)
        queries = []
        for i, comp in enumerate(competitions, 1):
            queries.append(types.InlineQueryResultArticle(
                id=str(i), title=comp[0], description=comp[1],
                input_message_content=types.InputTextMessageContent(comp[2], parse_mode='html')))
        await bot.answer_inline_query(inline_query.id, queries, cache_time=400000)
    except Exception as e:
        logger.error(e)


@dp.inline_handler(lambda query: 'records' in query.query)
async def display_records_menu(inline_query: types.InlineQuery):
    try:
        records_tables = await records.top_parkruns()
        m1 = types.InlineQueryResultArticle(id='1', title='Top10 –±—ã—Å—Ç—Ä—ã—Ö –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤', description='–ø–æ –º—É–∂—Å–∫–∏–º —Ä–µ–∫–æ—Ä–¥–∞–º',
                                            input_message_content=types.InputTextMessageContent(records_tables[0],
                                                                                                parse_mode='Markdown'))
        m2 = types.InlineQueryResultArticle(id='2', title='Top10 –±—ã—Å—Ç—Ä—ã—Ö –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤', description='–ø–æ –∂–µ–Ω—Å–∫–∏–º —Ä–µ–∫–æ—Ä–¥–∞–º',
                                            input_message_content=types.InputTextMessageContent(records_tables[2],
                                                                                                parse_mode='Markdown'))
        m3 = types.InlineQueryResultArticle(id='3', title='Top10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤',
                                            description='–ø–æ –º—É–∂—Å–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º',
                                            input_message_content=types.InputTextMessageContent(records_tables[1],
                                                                                                parse_mode='Markdown'))
        m4 = types.InlineQueryResultArticle(id='4', title='Top10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤',
                                            description='–ø–æ –∂–µ–Ω—Å–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º',
                                            input_message_content=types.InputTextMessageContent(records_tables[3],
                                                                                                parse_mode='Markdown'))
        await bot.answer_inline_query(inline_query.id, [m1, m2, m3, m4], cache_time=100000)
    except Exception as e:
        logger.error(e)


@dp.inline_handler(lambda query: 'teammates' in query.query)
async def query_teammates(inline_query: types.InlineQuery):
    try:
        pattern = '‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö '
        m1 = types.InlineQueryResultArticle(
            id='1', title='–ì–¥–µ –±–µ–≥–∞–ª–∏ –º–æ–∏ –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–∏?', description='–ø–µ—Ä–µ—á–µ–Ω—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤',
            input_message_content=types.InputTextMessageContent(pattern + '–æ–± —É—á–∞—Å—Ç–∏–∏...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/1.jpg',
            thumb_width=48, thumb_height=48)
        m2 = types.InlineQueryResultArticle(
            id='2', title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—É–±–∞ –≤ —Å–∏—Å—Ç–µ–º–µ parkrun',
            description='–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—É–±',
            input_message_content=types.InputTextMessageContent(pattern + '–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª—É–±–µ'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/2.jpg',
            thumb_width=48, thumb_height=48)
        m3 = types.InlineQueryResultArticle(
            id='3', title='–¢–æ–ø 10 –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–æ–≤ –ø–æ —á–∏—Å–ª—É –∑–∞–±–µ–≥–æ–≤', description='–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞—Ä–∫—Ä–∞–Ω–µ',
            input_message_content=types.InputTextMessageContent(pattern + '–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–æ–≤...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/4.jpg',
            thumb_width=48, thumb_height=48)
        m4 = types.InlineQueryResultArticle(
            id='4', title='–¢–æ–ø 10 –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä–∫—Ä–∞–Ω–æ–≤', description='–ø–æ –≤—Å–µ–º –ø–∞—Ä–∫—Ä–∞–Ω–∞–º',
            input_message_content=types.InputTextMessageContent(pattern + '–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—Ç–æ–≤...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/5.jpg',
            thumb_width=48, thumb_height=48)
        m5 = types.InlineQueryResultArticle(
            id='5', title='–¢–æ–ø 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–∏—Ö –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–æ–≤', description='–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞—Ä–∫—Ä–∞–Ω–µ',
            input_message_content=types.InputTextMessageContent(pattern + '–æ —Ä–µ–∫–æ—Ä–¥–∞—Ö...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/6.jpg',
            thumb_width=48, thumb_height=48)
        await bot.answer_inline_query(inline_query.id, [m1, m3, m4, m5, m2], cache_time=36000)
    except Exception as e:
        logger.error(e)


@dp.inline_handler(lambda query: 'latestresults' in query.query)
async def query_latestparkrun(inline_query: types.InlineQuery):
    try:
        pattern = 'üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö '
        m1 = types.InlineQueryResultArticle(
            id='1', title='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏', description='–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞—Ä–∫—Ä–∞–Ω–µ',
            input_message_content=types.InputTextMessageContent(pattern + '–∏ —Ä–∞—Å—á—ë—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/8.jpg',
            thumb_width=48, thumb_height=48)
        m2 = types.InlineQueryResultArticle(
            id='2', title='–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–ª—É–±–∞–º', description='–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞—Ä–∫—Ä–∞–Ω–µ',
            input_message_content=types.InputTextMessageContent(pattern + '–æ –∫–ª—É–±–∞—Ö...'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/9.jpg',
            thumb_width=48, thumb_height=48)
        m3 = types.InlineQueryResultArticle(
            id='3', title='–°–≤–æ–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π', description='–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–∏–¥–µ—Ä—ã',
            input_message_content=types.InputTextMessageContent(pattern + '—Å –æ–±—â–µ–π –∏–Ω—Ñ–æ–π.', parse_mode='Markdown'),
            thumb_url='https://raw.githubusercontent.com/vol1ura/wr-tg-bot/master/static/pics/3.jpg',
            thumb_width=48, thumb_height=48)
        await bot.answer_inline_query(inline_query.id, [m1, m2, m3], cache_time=0)
    except Exception as e:
        logger.error(e)


@dp.inline_handler(lambda query: 'instagram' in query.query)
async def display_instagram_menu(inline_query: types.InlineQuery):
    offset = int(inline_query.offset) if inline_query.offset else 0
    try:
        quotes = content.instagram_profiles[offset:]
        m_next_offset = str(offset + 15) if len(quotes) >= 15 else None
        inst_menu = [types.InlineQueryResultArticle(
            id=f'{k + offset}', title=f'@{p}',
            input_message_content=types.InputTextMessageContent(f"–î–æ—Å—Ç–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏–∑ @{p}. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        )
            for k, p in enumerate(quotes[:15])]
        await bot.answer_inline_query(inline_query.id, inst_menu,
                                      next_offset=m_next_offset if m_next_offset else '', cache_time=300000)
    except Exception as e:
        logger.error(e)
